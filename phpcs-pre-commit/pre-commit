#!/bin/bash
# PHP CodeSniffer pre-commit hook for git.
#
# @author Soenke Ruempler <soenke@ruempler.eu>
# @author Sebastian Kaspari <s.kaspari@googlemail.com>
# @author Alexander Elyseev <alexander.elyseev@gmail.com>
#

REPOSITORY_PATH=
PHPCS_BIN=/usr/bin/phpcs
PHPCS_CODING_STANDARD=PEAR
PHPCS_IGNORE=
TMP_STAGING=".tmp_staging/"
CONFIG_FILE=$(dirname $0)/pre-commit.config

# Parse config file.
if [ -e "$CONFIG_FILE" ]; then
    . $CONFIG_FILE
fi

# Simple check if code sniffer is set up correctly.
if [ ! "$PHPCS_BIN" ]; then
    echo "PHP CodeSniffer not found -> $PHPCS_BIN"
    exit 1
fi

# Stolen from template file.
if git rev-parse --verify HEAD
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object.
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# This is the magic: retrieve all files in staging area that are added, modified or renamed
# but no deletions etcm
FILES=$(git diff-index --name-only --cached --diff-filter=ACMR $against -- )

if [ "$FILES" == "" ]; then
    exit 0
fi

# Match files against whitelist.
FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | egrep -q "$PHPCS_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" == "" ]; then
    exit 0
fi

# Execute the code sniffer.
if [ "$PHPCS_IGNORE" != "" ]; then
    IGNORE="--ignore=$PHPCS_IGNORE"
else
    IGNORE=""
fi

# Create temporary copy of staging area.
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be commited and not
# the version in the working directory.
STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
    ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)

    # Create staged version of file in temporary staging area with the same
    # path as the original file so that the phpcs ignore filters can be applied
    mkdir -p "$TMP_STAGING/$(dirname $FILE)"
    git cat-file blob $ID > "$TMP_STAGING/$FILE"
    STAGED_FILES="$STAGED_FILES $REPOSITORY_PATH$TMP_STAGING/$FILE"
done

OUTPUT=$(exec $PHPCS_BIN -s -n --standard=$PHPCS_CODING_STANDARD $IGNORE $REPOSITORY_PATH$TMP_STAGING)
RETVAL=$?

# Delete temporary copy of staging area.
rm -rf $TMP_STAGING

if [ $RETVAL -ne 0 ]; then
    echo "$OUTPUT" | less
fi
exit $RETVAL
